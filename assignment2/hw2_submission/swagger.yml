swagger: '2.0'
  info:
    title: AI Photo Search
    description: 'AI Photo Search application, built during the Cloud and Big Data course at Columbia University.'
    version: 1.0.0
  schemes:
    - https
  basePath: /v1
  produces:
    - application/json
  paths:
    /search:
      get:
        summary: photo search method
        description: |
          This API takes in a search query as a query parameter and returns zero or more photos that match the search query.
        operationId: searchPhotos
        parameters:
          - in: query
            name: q
            schema:
              type: string
            description: the string to be searched
        produces:
          - application/json
        responses:
          '200':
            description: search results
            schema:
              $ref: '#/definitions/SearchResponse'
            headers:
              Access-Control-Allow-Headers:
                type: "string"
              Access-Control-Allow-Methods:
                type: "string"
              Access-Control-Allow-Origin:
                type: "string"
          '403':
            description: Unauthorized
            schema:
              $ref: '#/definitions/Error'
            headers:
              Access-Control-Allow-Headers:
                type: "string"
              Access-Control-Allow-Methods:
                type: "string"
              Access-Control-Allow-Origin:
                type: "string"
          '500':
            description: Unexpected error
            schema:
              $ref: '#/definitions/Error'
            headers:
              Access-Control-Allow-Headers:
                type: "string"
              Access-Control-Allow-Methods:
                type: "string"
              Access-Control-Allow-Origin:
                type: "string"
        x-amazon-apigateway-integration:
          credentials:
            Fn::Sub: ${ApiGatewayLambdaRole.Arn}
          httpMethod: POST
          uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaFunction2Name}/invocations'
          timeoutInMillis: 3000
          type: "aws_proxy"
          responses:
            4\d{2}:
              statusCode: '400'
              responseParameters:
                method.response.header.Access-Control-Allow-Headers : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                method.response.header.Access-Control-Allow-Methods : "'*'"
                method.response.header.Access-Control-Allow-Origin : "'*'"
            default:
              statusCode: '200'
              responseParameters:
                method.response.header.Access-Control-Allow-Headers : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                method.response.header.Access-Control-Allow-Methods : "'*'"
                method.response.header.Access-Control-Allow-Origin : "'*'"
            5\d{2}:
              statusCode: '500'
              responseParameters:
                method.response.header.Access-Control-Allow-Headers : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                method.response.header.Access-Control-Allow-Methods : "'*'"
                method.response.header.Access-Control-Allow-Origin : "'*'"
      options:
        summary: CORS support
        description: |
          Enable CORS by returning correct headers
        consumes:
          - application/json
        produces:
          - application/json
        tags:
          - CORS
        x-amazon-apigateway-integration:
          type: mock
          requestTemplates:
            application/json: |
              {
                "statusCode" : 200
              }
          responses:
            "default":
              statusCode: "200"
              responseParameters:
                method.response.header.Access-Control-Allow-Headers : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                method.response.header.Access-Control-Allow-Methods : "'*'"
                method.response.header.Access-Control-Allow-Origin : "'*'"
              responseTemplates:
                application/json: |
                  {}
        responses:
          '200':
            description: Default response for CORS method
            headers:
              Access-Control-Allow-Headers:
                type: "string"
              Access-Control-Allow-Methods:
                type: "string"
              Access-Control-Allow-Origin:
                type: "string"
    '/photos/{item}':
      put:
        summary: photo upload method
        description: |
          This API takes in the multi-part body sent to it (ex. a photo) and uploads it to an S3 bucket.
        operationId: uploadPhoto
        consumes:
          - image/png
          - image/jpeg
          - image/tiff
          - image/gif
          - image/pjpeg
        parameters:
        - name: Content-Type
          in: header
          required: true
          type: string
        - name: x-amz-meta-customLabels
          in: header
          required: true
          type: array
          items:
            type: string
        - name: item
          in: path
          required: true
          type: string
        produces:
          - application/json
        responses:
          '200':
            description: S3 PUT operation response
            schema:
              type: object
            headers:
              Content-Length:
                type: string
              Date:
                type: string
              Content-Type:
                type: string
              Access-Control-Allow-Headers:
                type: "string"
              Access-Control-Allow-Methods:
                type: "string"
              Access-Control-Allow-Origin:
                type: "string"
          '403':
            description: Unauthorized
            schema:
              $ref: '#/definitions/Error'
            headers:
              Access-Control-Allow-Headers:
                type: "string"
              Access-Control-Allow-Methods:
                type: "string"
              Access-Control-Allow-Origin:
                type: "string"
          '500':
            description: Unexpected error
            schema:
              $ref: '#/definitions/Error'
            headers:
              Access-Control-Allow-Headers:
                type: "string"
              Access-Control-Allow-Methods:
                type: "string"
              Access-Control-Allow-Origin:
                type: "string"
        x-amazon-apigateway-integration:
          credentials:
            Fn::Sub: ${ApiGatewayS3ProxyRole.Arn}
          contentHandling: 'CONVERT_TO_BINARY'
          responses:
            4\d{2}:
              statusCode: '400'
              responseParameters:
                method.response.header.Access-Control-Allow-Headers : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                method.response.header.Access-Control-Allow-Methods : "'*'"
                method.response.header.Access-Control-Allow-Origin : "'*'"
            default:
              statusCode: '200'
              responseParameters:
                method.response.header.Content-Type: integration.response.header.Content-Type
                method.response.header.Content-Length: integration.response.header.Content-Length
                method.response.header.Access-Control-Allow-Headers : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                method.response.header.Access-Control-Allow-Methods : "'*'"
                method.response.header.Access-Control-Allow-Origin : "'*'"
            5\d{2}:
              statusCode: '500'
              responseParameters:
                method.response.header.Access-Control-Allow-Headers : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                method.response.header.Access-Control-Allow-Methods : "'*'"
                method.response.header.Access-Control-Allow-Origin : "'*'"
          requestParameters:
            integration.request.path.object: method.request.path.item
            integration.request.header.Content-Type: method.request.header.Content-Type
            integration.request.header.x-amz-meta-customLabels: method.request.header.x-amz-meta-customLabels
          uri: !Sub 'arn:aws:apigateway:${AWS::Region}:s3:path/${PhotoBucketName}/{object}'
          passthroughBehavior: when_no_match
          httpMethod: PUT
          type: aws
      options:
        summary: CORS support
        description: |
          Enable CORS by returning correct headers
        consumes:
          - application/json
        produces:
          - application/json
        tags:
          - CORS
        x-amazon-apigateway-integration:
          type: mock
          requestTemplates:
            application/json: |
              {
                "statusCode" : 200
              }
          responses:
            "default":
              statusCode: "200"
              responseParameters:
                method.response.header.Access-Control-Allow-Headers : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-amz-meta-customLabels'"
                method.response.header.Access-Control-Allow-Methods : "'*'"
                method.response.header.Access-Control-Allow-Origin : "'*'"
              responseTemplates:
                application/json: |
                  {}
        responses:
          '200':
            description: Default response for CORS method
            headers:
              Access-Control-Allow-Headers:
                type: "string"
              Access-Control-Allow-Methods:
                type: "string"
              Access-Control-Allow-Origin:
                type: "string"
  definitions:
    SearchResponse:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/definitions/Photo'
    Photo:
      type: object
      properties:
        url:
          type: string
        labels:
          type: array
          items:
            type: string
    Error:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    Empty:
      type: object