AWSTemplateFormatVersion: '2010-09-09'
Description: COMS6998 Spring 2022 HW2 - Infra (excl. Lambda Functions' CI/CD pipeline)

Parameters:
  FrontendBucketName:
    Type: String
    Default: hw2-demo-b1-frontend-storage-dev
  
  PhotoBucketName:
    Type: String
    Default: hw2-demo-b2-photo-storage-dev

  FrontendCICDBucketName:
    Type: String
    Default: hw2-demo-frontend-cicd-storage
  
  ApiGatewayLambdaRoleName:
    Type: String
    Default: hw2-demo-api-gateway-lambda-role-dev
  
  ApiGatewayS3RoleName:
    Type: String
    Default: hw2-demo-api-gateway-s3-role-dev
  
  ApiName:
    Type: String
    Default: hw2-demo-api-dev

  ApiDeployStageName:
    Type: String
    Default: v1

  LambdaBucketName:
    Type: String
    Default: hw2-demo-lambda-cicd-storage

  DeploymentPackageKey:
    Type: String
    Description: An S3 object key pointing of a ZIP file, an archive of everything that is needed to run the Lambda function. It is the output of the Build stage of the pipeline.

  LambdaFunction1Name:
    Type: String
    Default: hw2-demo-index-photos-dev

  LambdaFunction2Name:
    Type: String
    Default: hw2-demo-search-photos-dev

  LexName:
    Type: String
    Default: PhotoSearchBot

  LexAlias:
    Type: String
    Default: SearchBot

  ESName:
    Type: String
    Default: hw2-demo-photos-dev

  ESNS3AccessPolicyName:
    Type: String
    Default: hw2-demo-es-n-s3-access

  GitHubUser:
    Type: String
    Default: howieraem2

  GitHubToken:
    Type: String
    Default: 
  
  GitHubRepoFrontend:
    Type: String
    Default: 6998-hw2-frontend

  GitHubBranch:
    Type: String
    Default: master

Resources:
  ## Bucket Configs
  Bucket1:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: !Ref FrontendBucketName
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html

  BucketPolicy1:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Id: PublicWebsitePolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref Bucket1
                - /*
      Bucket: !Ref Bucket1

  Bucket2:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    DependsOn: PermissionForS3ToInvokeLambda
    Properties:
      BucketName: !Ref PhotoBucketName
      AccessControl: PublicRead
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - POST
              - DELETE
            AllowedOrigins:
              - '*'
            ExposedHeaders:
              - x-amz-meta-customLabels
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: "s3:ObjectCreated:Put"
            Function: !GetAtt IndexPhotoLambda.Arn

  BucketPolicy2:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Id: PublicWebsitePolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref Bucket2
                - /*
      Bucket: !Ref Bucket2
  ## End of Bucket Configs

  ## Lambda Function Configs
  PermissionForS3ToInvokeLambda:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt IndexPhotoLambda.Arn
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub "arn:aws:s3:::${PhotoBucketName}"

  ESNS3Access:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Ref ESNS3AccessPolicyName
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: "es:*"
            Resource:
              !Join
              - ''
              - - !GetAtt ElasticsearchDomain.Arn
                - "/*"
          - Effect: Allow
            Action: "rekognition:*"
            Resource: "*"
          - Effect: Allow
            Action:
              - "s3:Get*"
              - "s3:List*"
              - "s3-object-lambda:Get*"
              - "s3-object-lambda:List*"
            Resource:
              - !Sub arn:aws:s3:::${PhotoBucketName}/*
              - !Sub arn:aws:s3:::${PhotoBucketName}
          - Effect: Allow
            Action:
              - lex:PostText
              - lex:PostContent
            Resource: !Sub "arn:aws:lex:${AWS::Region}:${AWS::AccountId}:bot:${LexName}:${LexAlias}"

      Roles:
        - !Ref IndexPhotoLambdaExecutionRole

  IndexPhotoLambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

  IndexPhotoLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: !Ref DeploymentPackageKey
      Description: This function is used to upload index to Elasticsearch
      FunctionName: !Ref LambdaFunction1Name
      Handler: lf1.lambda_handler
      MemorySize: 256
      Role: !GetAtt IndexPhotoLambdaExecutionRole.Arn
      Runtime: "python3.9"
      Timeout: 300
      Environment:
        Variables:
          ES_ENDPOINT: !GetAtt ElasticsearchDomain.DomainEndpoint
          REGION: !Ref AWS::Region

  BotFullfilmentLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: !Ref DeploymentPackageKey
      Description: "This function will do the fullfillment of photo search bot"
      FunctionName: !Ref LambdaFunction2Name
      Handler: lf2.lambda_handler
      MemorySize: 256
      Role: !GetAtt IndexPhotoLambdaExecutionRole.Arn
      Runtime: "python3.9"
      Timeout: 300
      Environment:
        Variables:
          ES_ENDPOINT: !GetAtt ElasticsearchDomain.DomainEndpoint
          REGION: !Ref AWS::Region
  ## End of Lambda Function Configs

  ## ElasticSearch Configs
  ElasticsearchDomain:
    Type: "AWS::OpenSearchService::Domain"
    Properties:
      DomainName: !Ref ESName
      ClusterConfig:
        DedicatedMasterEnabled: false
        InstanceCount: 1
        InstanceType: t3.small.search
        ZoneAwarenessEnabled: 'false'
      DomainEndpointOptions:
        EnforceHTTPS: true
      EBSOptions:
        EBSEnabled: true
        Iops: 0
        VolumeSize: 10
        VolumeType: "gp2"
      EncryptionAtRestOptions:
        Enabled: true
      NodeToNodeEncryptionOptions:
        Enabled: true
      AdvancedSecurityOptions:
        Enabled: true
        InternalUserDatabaseEnabled: false
        MasterUserOptions:
          MasterUserARN: !GetAtt IndexPhotoLambdaExecutionRole.Arn
      AdvancedOptions:
        rest.action.multi.allow_explicit_index: true
      AccessPolicies:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            AWS: '*'
          Action:
            - 'es:*'
          Resource: !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${ESName}/*'
  ## End of ElasticSearch Configs

  ## API Gateway Configs
  ApiGatewayS3ProxyRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref ApiGatewayS3RoleName
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: hw2-demo-apigateway-s3-policy-dev
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource:
                  - !Sub 'arn:aws:s3:::${PhotoBucketName}'
                  - !Sub 'arn:aws:s3:::${PhotoBucketName}/*'

  ApiGatewayLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref ApiGatewayLambdaRoleName
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: hw2-demo-apigateway-lambda-policy-dev
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaFunction2Name}'

  API:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Ref ApiName
      Description: A demo API for AI Photo Search
      EndpointConfiguration:
        Types:
          - REGIONAL
      BinaryMediaTypes:
        - image/png
        - image/jpeg
        - image/tiff
        - image/gif
        - image/pjpeg
      Body:
        swagger: '2.0'
        info:
          title: AI Photo Search
          description: 'AI Photo Search application, built during the Cloud and Big Data course at Columbia University.'
          version: 1.0.0
        schemes:
          - https
        basePath: /v1
        produces:
          - application/json
        paths:
          /search:
            get:
              summary: photo search method
              description: |
                This API takes in a search query as a query parameter and returns zero or more photos that match the search query.
              operationId: searchPhotos
              parameters:
                - in: query
                  name: q
                  schema:
                    type: string
                  description: the string to be searched
              produces:
                - application/json
              responses:
                '200':
                  description: search results
                  schema:
                    $ref: '#/definitions/SearchResponse'
                  headers:
                    Access-Control-Allow-Headers:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Origin:
                      type: "string"
                '403':
                  description: Unauthorized
                  schema:
                    $ref: '#/definitions/Error'
                  headers:
                    Access-Control-Allow-Headers:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Origin:
                      type: "string"
                '500':
                  description: Unexpected error
                  schema:
                    $ref: '#/definitions/Error'
                  headers:
                    Access-Control-Allow-Headers:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Origin:
                      type: "string"
              x-amazon-apigateway-integration:
                credentials:
                  Fn::Sub: ${ApiGatewayLambdaRole.Arn}
                httpMethod: POST
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaFunction2Name}/invocations'
                timeoutInMillis: 3000
                type: "aws_proxy"
                responses:
                  4\d{2}:
                    statusCode: '400'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods : "'*'"
                      method.response.header.Access-Control-Allow-Origin : "'*'"
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods : "'*'"
                      method.response.header.Access-Control-Allow-Origin : "'*'"
                  5\d{2}:
                    statusCode: '500'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods : "'*'"
                      method.response.header.Access-Control-Allow-Origin : "'*'"
            options:
              summary: CORS support
              description: |
                Enable CORS by returning correct headers
              consumes:
                - application/json
              produces:
                - application/json
              tags:
                - CORS
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: |
                    {
                      "statusCode" : 200
                    }
                responses:
                  "default":
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods : "'*'"
                      method.response.header.Access-Control-Allow-Origin : "'*'"
                    responseTemplates:
                      application/json: |
                        {}
              responses:
                '200':
                  description: Default response for CORS method
                  headers:
                    Access-Control-Allow-Headers:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Origin:
                      type: "string"
          '/photos/{item}':
            put:
              summary: photo upload method
              description: |
                This API takes in the multi-part body sent to it (ex. a photo) and uploads it to an S3 bucket.
              operationId: uploadPhoto
              consumes:
                - image/png
                - image/jpeg
                - image/tiff
                - image/gif
                - image/pjpeg
              parameters:
              - name: Content-Type
                in: header
                required: true
                type: string
              - name: x-amz-meta-customLabels
                in: header
                required: true
                type: array
                items:
                  type: string
              - name: item
                in: path
                required: true
                type: string
              produces:
                - application/json
              responses:
                '200':
                  description: S3 PUT operation response
                  schema:
                    type: object
                  headers:
                    Content-Length:
                      type: string
                    Date:
                      type: string
                    Content-Type:
                      type: string
                    Access-Control-Allow-Headers:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Origin:
                      type: "string"
                '403':
                  description: Unauthorized
                  schema:
                    $ref: '#/definitions/Error'
                  headers:
                    Access-Control-Allow-Headers:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Origin:
                      type: "string"
                '500':
                  description: Unexpected error
                  schema:
                    $ref: '#/definitions/Error'
                  headers:
                    Access-Control-Allow-Headers:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Origin:
                      type: "string"
              x-amazon-apigateway-integration:
                credentials:
                  Fn::Sub: ${ApiGatewayS3ProxyRole.Arn}
                contentHandling: 'CONVERT_TO_BINARY'
                responses:
                  4\d{2}:
                    statusCode: '400'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods : "'*'"
                      method.response.header.Access-Control-Allow-Origin : "'*'"
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Content-Type: integration.response.header.Content-Type
                      method.response.header.Content-Length: integration.response.header.Content-Length
                      method.response.header.Access-Control-Allow-Headers : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods : "'*'"
                      method.response.header.Access-Control-Allow-Origin : "'*'"
                  5\d{2}:
                    statusCode: '500'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods : "'*'"
                      method.response.header.Access-Control-Allow-Origin : "'*'"
                requestParameters:
                  integration.request.path.object: method.request.path.item
                  integration.request.header.Content-Type: method.request.header.Content-Type
                  integration.request.header.x-amz-meta-customLabels: method.request.header.x-amz-meta-customLabels
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:s3:path/${PhotoBucketName}/{object}'
                passthroughBehavior: when_no_match
                httpMethod: PUT
                type: aws
            options:
              summary: CORS support
              description: |
                Enable CORS by returning correct headers
              consumes:
                - application/json
              produces:
                - application/json
              tags:
                - CORS
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: |
                    {
                      "statusCode" : 200
                    }
                responses:
                  "default":
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-amz-meta-customLabels'"
                      method.response.header.Access-Control-Allow-Methods : "'*'"
                      method.response.header.Access-Control-Allow-Origin : "'*'"
                    responseTemplates:
                      application/json: |
                        {}
              responses:
                '200':
                  description: Default response for CORS method
                  headers:
                    Access-Control-Allow-Headers:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Origin:
                      type: "string"
        definitions:
          SearchResponse:
            type: object
            properties:
              results:
                type: array
                items:
                  $ref: '#/definitions/Photo'
          Photo:
            type: object
            properties:
              url:
                type: string
              labels:
                type: array
                items:
                  type: string
          Error:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
          Empty:
            type: object
  
  APIDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties: 
      RestApiId: !Ref API

  APIDeployStage:
    Type: AWS::ApiGateway::Stage
    Properties: 
      DeploymentId: !Ref APIDeployment
      RestApiId: !Ref API
      StageName: !Ref ApiDeployStageName
  ## End of API Gateway Configs

  ## Frontend CI/CD Configs
  FrontendCICDBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: !Ref FrontendCICDBucketName

  FrontendCodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "codebuild.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: hw2-demo-frontend-code-build-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
              - Resource:
                  - !Sub arn:aws:s3:::${FrontendCICDBucket}/*
                  - !Sub arn:aws:s3:::${Bucket1}/*
                  - !Sub arn:aws:s3:::${Bucket1}
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
              - Resource: "*"
                Effect: Allow
                Action:
                  - s3:ListAllMyBuckets
                  - s3:ListObjects
  
  FrontendCodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "codepipeline.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: hw2-demo-frontend-code-pipeline-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource:
                  - !Sub arn:aws:s3:::${FrontendCICDBucket}/*
                  - !Sub arn:aws:s3:::${Bucket1}/*
                  - !Sub arn:aws:s3:::${Bucket1}
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
                  - s3:ListObjects
              - Resource:
                  - arn:aws:s3:::*
                Effect: Allow
                Action:
                  - s3:ListAllMyBuckets
              - Resource: "*"
                Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                  - iam:PassRole
              - Resource: "*"
                Effect: Allow
                Action:
                  - lambda:*

  FrontendBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: "CODEPIPELINE"
      Source:
        Type: "CODEPIPELINE"
        BuildSpec: |
          version: 0.1
          phases:
            install:
              commands:
                - echo Installing packages
                - yarn install
            build:
              commands:
                - echo Building static files
                - yarn build
          artifacts:
            files:
              - 'build/**/*'
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: "aws/codebuild/amazonlinux2-x86_64-standard:3.0"
        Type: "LINUX_CONTAINER"
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: PUBLIC_URL
            Value: '/'
          - Name: REACT_APP_API_GATEWAY_ID
            Value: !Ref API
          - Name: REACT_APP_AWS_REGION
            Value: !Ref AWS::Region
          - Name: REACT_APP_API_GATEWAY_STAGE
            Value: !Ref ApiDeployStageName
      Name: !Sub ${AWS::StackName}-build-frontend
      ServiceRole: !Ref FrontendCodeBuildRole

  FrontendDeployProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: "CODEPIPELINE"
      Source:
        Type: "CODEPIPELINE"
        BuildSpec: |
          version: 0.1
          phases:
            build:
              commands:
                - echo Deploying built frontend to S3
                - cd ./build && aws s3 cp . s3://$S3_FRONTEND_BUCKET --recursive > deploymentResult.txt
          artifacts:
            files: build/deploymentResult.txt
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: "aws/codebuild/amazonlinux2-x86_64-standard:3.0"
        Type: "LINUX_CONTAINER"
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: S3_FRONTEND_BUCKET
            Value: !Ref Bucket1
      Name: !Sub ${AWS::StackName}-deploy-frontend
      ServiceRole: !Ref FrontendCodeBuildRole

  FrontendPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt FrontendCodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref FrontendCICDBucket
      Name: !Sub '${AWS::StackName}-frontend-pipeline'
      Stages:
        - Name: Source
          Actions:
            - Name: App
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              Configuration:
                Owner: !Ref GitHubUser
                Repo: !Ref GitHubRepoFrontend
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubToken
                PollForSourceChanges: true
              OutputArtifacts:
                - Name: App
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: BuildStep
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref FrontendBuildProject
              InputArtifacts:
                - Name: App
              OutputArtifacts:
                - Name: FrontendBuild
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: DeployStep
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref FrontendDeployProject
              InputArtifacts:
                - Name: FrontendBuild
              OutputArtifacts:
                - Name: FrontendDeployOutput
              RunOrder: 1
  ## End of Frontend CI/CD Configs


## URLs
Outputs:
  APIGatewayEndpoint:
    Description: "API Gateway deployed stage endpoint"
    Value: !Sub "https://${API}.execute-api.${AWS::Region}.amazonaws.com/${ApiDeployStageName}/"
  WebsiteURL:
    Value: !GetAtt
      - Bucket1
      - WebsiteURL
    Description: URL for frontend hosted on S3
